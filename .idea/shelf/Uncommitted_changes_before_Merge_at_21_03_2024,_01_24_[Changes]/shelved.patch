Index: server/src/users/users.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {\n\tForbiddenException,\n\tHttpException,\n\tHttpStatus,\n\tInjectable\n} from '@nestjs/common'\nimport { UserRole } from '@prisma/client'\nimport { MailService } from 'src/mail/mail.service'\nimport { PrismaService } from 'src/prisma/prisma.service'\nimport { v4 as uuidv4 } from 'uuid'\nimport { CreateUserReqDto, CreateUserResDto } from './dto/create-user.dto'\nimport { UpdateUserDto } from './dto/update-user.dto'\nimport { HashService } from './hashing.service'\n\n@Injectable()\nexport class UsersService {\n\tconstructor(\n\t\tprivate prismaService: PrismaService,\n\t\tprivate hashService: HashService,\n\t\tprivate mailService: MailService\n\t) {}\n\n\tasync create(createUserDto: CreateUserReqDto): Promise<CreateUserResDto> {\n\t\tconst passSalt = await this.hashService.genSalt()\n\t\tconst hashedPass = (await this.hashService.genHash(\n\t\t\tcreateUserDto.password,\n\t\t\tpassSalt\n\t\t)) as string\n\t\tconst candidate = await this.prismaService.user.findUnique({\n\t\t\twhere: {\n\t\t\t\temail: createUserDto.email\n\t\t\t}\n\t\t})\n\t\tif (candidate)\n\t\t\tthrow new HttpException(\n\t\t\t\t`User with email ${createUserDto.email} already exist`,\n\t\t\t\tHttpStatus.CONFLICT\n\t\t\t)\n\t\tconst activationLinkId: string = uuidv4()\n\t\t// FIX: Проверка на то, что такого email не существует\n\t\tthis.mailService.sendActivationMail(\n\t\t\tcreateUserDto.email,\n\t\t\t`${process.env.VALIDATION_URL_PREFIX}/${activationLinkId}`\n\t\t)\n\t\tconst { id, username, email, ...other } =\n\t\t\tawait this.prismaService.user.create({\n\t\t\t\tdata: {\n\t\t\t\t\temail: createUserDto.email,\n\t\t\t\t\tpassword: hashedPass,\n\t\t\t\t\tusername: createUserDto.username,\n\t\t\t\t\trole: UserRole.NOTDEFINED,\n\t\t\t\t\tactLink: activationLinkId\n\t\t\t\t}\n\t\t\t})\n\t\treturn { id, username, email }\n\t}\n\n\tfindAll() {\n\t\treturn `This action returns all users`\n\t}\n\n\tfindOne(id: string) {\n\t\treturn this.prismaService.user.findUnique({\n\t\t\twhere: {\n\t\t\t\tid: id\n\t\t\t}\n\t\t})\n\t}\n\n\tupdate(id: string, updateUserDto: UpdateUserDto) {\n\t\treturn `This action updates a #${id} user`\n\t}\n\n\tremove(id: string) {\n\t\treturn `This action removes a #${id} user`\n\t}\n\n\tfindByEmail(email: string) {\n\t\treturn this.prismaService.user.findUnique({\n\t\t\twhere: {\n\t\t\t\temail: email\n\t\t\t}\n\t\t})\n\t}\n\n\tasync validateEmail(actLinkUuid: string) {\n\t\tconst userData = await this.prismaService.user.findUnique({\n\t\t\twhere: {\n\t\t\t\tactLink: actLinkUuid\n\t\t\t}\n\t\t})\n\t\tif (!userData) {\n\t\t\tthrow new HttpException(\n\t\t\t\t{\n\t\t\t\t\tstatus: HttpStatus.NOT_FOUND,\n\t\t\t\t\terror: 'There is no account with this link uuid'\n\t\t\t\t},\n\t\t\t\tHttpStatus.NOT_FOUND\n\t\t\t)\n\t\t}\n\t\tif (userData.isActivated) {\n\t\t\tthrow new ForbiddenException()\n\t\t}\n\t\tawait this.prismaService.user.update({\n\t\t\twhere: {\n\t\t\t\tid: userData.id\n\t\t\t},\n\t\t\tdata: {\n\t\t\t\tisActivated: true\n\t\t\t}\n\t\t})\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/users/users.service.ts b/server/src/users/users.service.ts
--- a/server/src/users/users.service.ts	(revision 9fb7173922e8d3220afab69a13a0035a23f5562a)
+++ b/server/src/users/users.service.ts	(date 1710973452956)
@@ -37,8 +37,8 @@
 				HttpStatus.CONFLICT
 			)
 		const activationLinkId: string = uuidv4()
-		// FIX: Проверка на то, что такого email не существует
-		this.mailService.sendActivationMail(
+		// FIXME: Проверка на то, что такого email не существует
+		await this.mailService.sendActivationMail(
 			createUserDto.email,
 			`${process.env.VALIDATION_URL_PREFIX}/${activationLinkId}`
 		)
